from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

import Translate.FuncTranslate as TF
from Keyboards.ReplyKeyboard import *
from Classes.BotClasses import *


router_start = Router()


@router_start.message(CommandStart())
#async def cmd_start(message: Message):
#   await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}.\n–Ø –±–æ—Ç –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–º—è—Ç–∏\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π.', reply_markup = MainMenu())
async def cmd_start(message: Message, state: FSMContext):
    await message.delete()
    await message.answer("Hello, setup my language!", reply_markup=languagekb)
    await state.set_state(StepsBots.CHOSENLANGUAGE)

@router_start.message(StepsBots.CHOSENLANGUAGE)
async def choose_language(message: Message,state: FSMContext):
    if message.text == "English üá¨üáß":
        lang = 'en'
        await message.answer(await TF.Translation("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —è–∑—ã–∫!",lang),reply_markup=ReplyKeyboardRemove())
        await state.update_data(Lang = lang)
        await message.answer(await TF.Translation("–ê —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n–í–≤–µ–¥–∏—Ç–µ –µ–º—ç–π–ª", lang))
        await state.set_state(StepsBots.AUTORIZATION)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞—Ç—Ä–∏–±—É—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤ –æ–±—ä–µ–∫—Ç
    elif message.text in "Russian üá∑üá∫":
        lang = 'ru'
        await message.answer(await TF.Translation("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —è–∑—ã–∫!",lang),reply_markup=ReplyKeyboardRemove())
        await state.update_data(Lang = lang)
        await message.answer(await TF.Translation("–ê —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n–í–≤–µ–¥–∏—Ç–µ –µ–º—ç–π–ª",lang))
        await state.set_state(StepsBots.AUTORIZATION)
        # —Ä—É—Å—Å–∫–∏–π

@router_start.message(StepsBots.CHOSENACTIVITY)
async def perhod_activity(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    lang = data.get('Lang', 'en')
    if message.text in await TF.Translation("–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", lang):
        await message.delete()
        await state.set_state(StepsBots.FORM)
        await bot.send_message(message.from_user.id, await TF.Translation("–£–∫–∞–∂–∏—Ç–µ –§–ò–û", lang), reply_markup=ReplyKeyboardRemove())


    elif message.text in await TF.Translation("–ü–æ–º–æ—â—å", lang):
        await message.delete()
        await message.answer(f'''{await TF.Translation("–ü—Ä–∏–≤–µ—Ç", lang)} {message.from_user.first_name}.
{await TF.Translation("–Ø –±–æ—Ç –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–º—è—Ç–∏.", lang)}
{await TF.Translation("–ß—Ç–æ —è –º–æ–≥—É:", lang)}
{await TF.Translation("–Ø –º–æ–≥—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∏—Å–ø–æ–ª—å–∑—É—è Yandex GPT –¥–ª—è –ø–æ–ª–µ–π —ç–ø–∏—Ç–∞—Ñ–∏—è –∏ –±–∏–æ–≥—Ä–∞—Ñ–∏—è;", lang)}
{await TF.Translation("–¢–∞–∫ –∂–µ –º–æ–≥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ);", lang)}
{await TF.Translation("–ï—â–µ –º–æ–≥—É –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ–ª—è –ø–æ –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ). ", lang)}''')
    
    elif message.text in await TF.Translation("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –≥–æ–ª–æ—Å–æ–º",lang):
        await message.delete()
        await bot.send_message(message.from_user.id, await TF.Translation("–ü—Ä–∏—à–ª–∏ –≥–æ–ª–æ–ª—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è.", lang))
        await state.set_state(StepsBots.READER_VOICE)
        
    elif message.text in await TF.Translation("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",lang):
        await message.delete()
        await message.answer(await TF.Translation("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π." , lang))
        await message.answer(await TF.Translation("–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ.", lang))
        await state.set_state(StepsBots.READER_PHOTO)